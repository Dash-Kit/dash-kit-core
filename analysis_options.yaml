include: package:flutter_lints/flutter.yaml

analyzer:
  strong-mode:
    implicit-dynamic: true
  errors:
    # treat missing required parameters as a error (not a hint)
    missing_required_param: error
    # treat missing returns as a error (not a hint)
    missing_return: error
    # allow having TODOs in the code
    todo: ignore
    # Ignore analyzer hints for updating pubspecs when using Future or
    # Stream and not importing dart:async
    # Please see https://github.com/flutter/flutter/pull/24528 for details.
    sdk_version_async_exported_from_core: ignore

    avoid_dynamic_calls: ignore # false-positive for json
    diagnostic_describe_all_properties: ignore # we don't write libraries
    discarded_futures: ignore # false-positive almost in all callbacks
    prefer_relative_imports: ignore # conflicts with avoid_relative_lib_imports
    avoid_catches_without_on_clauses: ignore # we don't use specific catches usually
    always_specify_types: ignore # incompatible with omit_local_variable_types
    avoid_annotating_with_dynamic: ignore # false-positive on typedef declaration
    no_default_cases: ignore # sometimes it is useful
    no_runtimeType_toString: ignore # sometimes it is useful
    prefer_double_quotes: ignore # we use single quotes
    public_member_api_docs: ignore # overhead
    prefer_expression_function_bodies: ignore # sometimes it is not worth
    prefer_if_elements_to_conditional_expressions: ignore # it is more difficult to read
    require_trailing_commas: ignore # requires to put commas in each method call
    unnecessary_final: ignore # incompatible with prefer_final_locals
    depend_on_referenced_packages: ignore # we don't need to import all transitive libraries
    invalid_annotation_target: ignore # fix for @JsonKey() target in freezed
    body_might_complete_normally_nullable: ignore # requires return in all hooks
    unnecessary_null_checks: ignore # leads to unexpected errors
    library_private_types_in_public_api: ignore # prevents to use private classes in stateful widgets
    prefer_function_declarations_over_variables: ignore # prevents to use private classes in stateful widgets
    unnecessary_raw_strings: ignore # breaks regexp highlights
    avoid_implementing_value_types: ignore # produces errors for UI-Kit
    prefer_mixin: ignore # force to implement all WidgetsBindingObserver methods
  exclude:
    - 'bin/cache/**'
    # workaround for https://github.com/dart-lang/sdk/issues/42910
    - 'local_plugins/**'
    # the following two are relative to the stocks example and the flutter package respectively
    # see https://github.com/dart-lang/sdk/issues/28463
    - 'lib/i18n/stock_messages_*.dart'
    - 'lib/src/http/**'
    - '**.g.dart'
    - '**.freezed.dart'
    - '**.mocks.dart'
  plugins:
    - dart_code_metrics

linter:
  rules:
    # Error Rules
    - always_use_package_imports
    - avoid_empty_else
    - avoid_print
    - avoid_relative_lib_imports
    - avoid_slow_async_io
    - avoid_type_to_string
    - avoid_types_as_parameter_names
    - avoid_web_libraries_in_flutter
    - cancel_subscriptions
    - close_sinks
    - comment_references
    - control_flow_in_finally
    - empty_statements
    - hash_and_equals
    - iterable_contains_unrelated_type
    - list_remove_unrelated_type
    - literal_only_boolean_expressions
    - no_adjacent_strings_in_list
    - no_duplicate_case_values
    - no_logic_in_create_state
    - prefer_void_to_null
    - test_types_in_equals
    - throw_in_finally
    - unnecessary_statements
    - unrelated_type_equality_checks
    - unsafe_html
    - use_build_context_synchronously
    - use_key_in_widget_constructors
    - valid_regexps
    # Style Rules
    - always_declare_return_types
    - always_put_control_body_on_new_line
    - always_put_required_named_parameters_first
    - always_require_non_null_named_parameters
    - annotate_overrides
    - avoid_bool_literals_in_conditional_expressions
    - avoid_catching_errors
    - avoid_classes_with_only_static_members
    - avoid_double_and_int_checks
    - avoid_equals_and_hash_code_on_mutable_classes
    - avoid_escaping_inner_quotes
    - avoid_field_initializers_in_const_classes
    - avoid_final_parameters
    - avoid_function_literals_in_foreach_calls
    - avoid_init_to_null
    - avoid_js_rounded_ints
    - avoid_multiple_declarations_per_line
    - avoid_null_checks_in_equality_operators
    - avoid_positional_boolean_parameters
    - avoid_private_typedef_functions
    - avoid_redundant_argument_values
    - avoid_renaming_method_parameters
    - avoid_return_types_on_setters
    - avoid_returning_null_for_void
    - avoid_returning_this
    - avoid_setters_without_getters
    - avoid_shadowing_type_parameters
    - avoid_single_cascade_in_expression_statements
    - avoid_types_on_closure_parameters
    - avoid_unnecessary_containers
    - avoid_unused_constructor_parameters
    - avoid_void_async
    - await_only_futures
    - camel_case_extensions
    - camel_case_types
    - cascade_invocations
    - cast_nullable_to_non_nullable
    - conditional_uri_does_not_exist
    - constant_identifier_names
    - curly_braces_in_flow_control_structures
    - deprecated_consistency
    - directives_ordering
    - do_not_use_environment
    - empty_catches
    - empty_constructor_bodies
    - eol_at_end_of_file
    - exhaustive_cases
    - file_names
    - flutter_style_todos
    - implementation_imports
    - join_return_with_assignment
    - leading_newlines_in_multiline_strings
    - library_names
    - library_prefixes
    - lines_longer_than_80_chars
    - missing_whitespace_between_adjacent_strings
    - no_leading_underscores_for_library_prefixes
    - no_leading_underscores_for_local_identifiers
    - non_constant_identifier_names
    - noop_primitive_operations
    - null_check_on_nullable_type_parameter
    - null_closures
    - omit_local_variable_types
    - one_member_abstracts
    - only_throw_errors
    - overridden_fields
    - package_api_docs
    - package_prefixed_library_names
    - parameter_assignments
    - prefer_adjacent_string_concatenation
    - prefer_asserts_in_initializer_lists
    - prefer_asserts_with_message
    - prefer_collection_literals
    - prefer_conditional_assignment
    - prefer_const_constructors
    - prefer_const_constructors_in_immutables
    - prefer_const_declarations
    - prefer_const_literals_to_create_immutables
    - prefer_constructors_over_static_methods
    - prefer_contains
    - prefer_final_fields
    - prefer_final_in_for_each
    - prefer_final_locals
    - prefer_for_elements_to_map_fromIterable
    - prefer_foreach
    - prefer_generic_function_type_aliases
    - prefer_if_null_operators
    - prefer_initializing_formals
    - prefer_inlined_adds
    - prefer_int_literals
    - prefer_interpolation_to_compose_strings
    - prefer_is_empty
    - prefer_is_not_empty
    - prefer_is_not_operator
    - prefer_iterable_whereType
    - prefer_null_aware_method_calls
    - prefer_null_aware_operators
    - prefer_single_quotes
    - prefer_spread_collections
    - prefer_typing_uninitialized_variables
    - provide_deprecation_message
    - recursive_getters
    - sized_box_for_whitespace
    - sized_box_shrink_expand
    - slash_for_doc_comments
    - sort_child_properties_last
    - sort_constructors_first
    - sort_unnamed_constructors_first
    - tighten_type_of_initializing_formals
    - type_annotate_public_apis
    - type_init_formals
    - unawaited_futures
    - unnecessary_await_in_return
    - unnecessary_brace_in_string_interps
    - unnecessary_const
    - unnecessary_constructor_name
    - unnecessary_getters_setters
    - unnecessary_lambdas
    - unnecessary_late
    - unnecessary_new
    - unnecessary_null_aware_assignments
    - unnecessary_null_aware_operator_on_extension_on_nullable
    - unnecessary_null_in_if_null_operators
    - unnecessary_nullable_for_final_variable_declarations
    - unnecessary_overrides
    - unnecessary_parenthesis
    - unnecessary_string_escapes
    - unnecessary_string_interpolations
    - unnecessary_this
    - unnecessary_to_list_in_spreads
    - use_colored_box
    - use_decorated_box
    - use_enums
    - use_full_hex_values_for_flutter_colors
    - use_function_type_syntax_for_parameters
    - use_if_null_to_convert_nulls_to_bools
    - use_is_even_rather_than_modulo
    - use_named_constants
    - use_raw_strings
    - use_rethrow_when_possible
    - use_setters_to_change_properties
    - use_string_buffers
    - use_super_parameters
    - use_test_throws_matchers
    - use_to_and_as_if_applicable
    - void_checks
    # Pub Rules
    - package_names
    - secure_pubspec_urls
    # - sort_pub_dependencies

dart_code_metrics:
  metrics:
    cyclomatic-complexity: 20
    number-of-parameters: 10
    lines-of-code: 50
    maximum-nesting-level: 5
    acceptable-level: 2
  metrics-exclude:
    - test/**
  rules:
    - newline-before-return
    - no-boolean-literal-compare
    - prefer-trailing-comma
    - no-equal-then-else
    - avoid-missing-enum-constant-in-map
    - avoid-unused-parameters
    - binary-expression-operand-order
    - double-literal-format
    - always-remove-listener
    - avoid-returning-widgets
    - avoid-unnecessary-setstate
    - avoid-collection-methods-with-unrelated-types
    - avoid-global-state
    - avoid-unnecessary-type-assertions
    - avoid-unnecessary-type-casts
    - avoid-unrelated-type-assertions
    - prefer-match-file-name
    - avoid-expanded-as-spacer
    - format-comment:
        ignored-patterns:
          - ^region
          - ^endregion
    - member-ordering:
        alphabetize: false
        order:
          - constructors
          - public-final-fields
          - private-final-fields
          - public-var-fields
          - private-var-fields
          - public-getters
          - private-setters
          - overriden-public-methods
          - public-methods
          - private-methods
          - public-static-methods
          - private-static-methods
        widgets-order:
          - constructors
          - public-final-fields
          - private-final-fields
          - public-var-fields
          - private-var-fields
          - public-getters
          - private-setters
          - overriden-public-methods
          - public-methods
          - private-methods
          - public-static-methods
          - private-static-methods
    - avoid-cascade-after-if-null
    - prefer-iterable-of
    - avoid-wrapping-in-padding
    - avoid-redundant-async
    - prefer-correct-test-file-name
    - avoid-unnecessary-type-assertions
    - prefer-correct-edge-insets-constructor
    - avoid-cascade-after-if-null
    - avoid-double-slash-imports
    - avoid-duplicate-exports
    - avoid-global-state
    - avoid-nested-conditional-expressions
    - avoid-throw-in-catch-block
    - avoid-unnecessary-conditionals
    - avoid-unnecessary-type-casts
    - avoid-unrelated-type-assertions
    - ban-name:
        entries:
          - ident: showDialog
            description: Please use show<YourProject>Dialog in this package
          - ident: DateTime.now
            description: Please use a clock.now instead
          - ident: print
            description: Please use logger.<i/w/e> instead
          - ident: debugPrint
            description: Please use logger.<i/w/e> instead
    - no-object-declaration
    - prefer-correct-type-name
    - prefer-enums-by-name
    - prefer-immediate-return
    - tag-name
    - avoid-shrink-wrap-in-lists
    - check-for-equals-in-render-object-setters
    - consistent-update-render-object
    - prefer-using-list-view
    - use-setstate-synchronously
  rules-exclude:
    - no-empty-block # sometimes there is no other way to make button be active  but not clickable
    - prefer-extracting-callbacks # produces parameters hell to sync them between each hook
    - avoid-passing-async-when-sync-expected # false-positive in almost all callbacks
    - avoid-non-ascii-symbols # false-positive for smiles
    - avoid-late-keyword # sometimes there is no other way
    - avoid-dynamic # false-positive on json parsers
    - avoid-ignoring-return-values # false-positive on each dispatch call
    - avoid-non-null-assertion # false-positive on each ! call which sometimes is useful
    - arguments-ordering # each refactoring requires changing params in all places
    - prefer-conditional-expressions # developer should decide which one is better
    - avoid-top-level-members-in-tests # false-positive for all methods in test like "devices"
    - list-all-equatable-fields # for equatable package only
    - missing-test-assertion
    - no-equal-arguments # false-positive when you need to use squares
    - no-magic-number # false-positive for all paddings, margins and so on
    - prefer-correct-identifier-length # not useful for loops
    - prefer-moving-to-variable # there is an issue with using hooks (multiple useFocusNode for e.g.)
    - prefer-commenting-analyzer-ignores # usually it is obvious
    - prefer-static-class # prevent using the feature of the language without any reason
    - prefer-async-await # forces to rewrite dispatch in async/await way
    - prefer-first # the developer should decide
    - prefer-last # the developer should decide
    - avoid-border-all # produces unexpected way to set borders
    - prefer-const-border-radius # produces unexpected way to set borders
    - prefer-single-widget-per-file # prevent making private widgets for only 1 page
  anti-patterns:
    - long-method
    - long-parameter-list